/*
 * MyRobot.cpp
 *
 *  Created on: Jan 7, 2017
 *      Author: 987
 */

#include <MyRobot.h>

class ShutdownJetsonCommand : public Command
{
public:
	ShutdownJetsonCommand() {}
	virtual ~ShutdownJetsonCommand() {}

protected:
	virtual void Initialize()
	{
		MyRobot::Get()->Shutdown_Jetson();
	}
	virtual bool IsFinished() { return false; }
	virtual void End() {}
	virtual void Interrupted() {}
};

MyRobot * MyRobot::TheRobot = NULL;

MyRobot::MyRobot()
{
	TheRobot = this;

	commandLeft = 0;
	commandRight = 0;
	commandIntake = 0;
	connectionattempts = 0;

	leftStick = new Joystick(0);
	rightStick = new Joystick(1);
	turretStick = new Joystick(2);

	Drivetrain = new Drivetrainclass();
	Intake = new IntakeClass();
	ShooterWheel = new ShooterWheelClass();
	Turret = new TurretClass();
	printf("Basic Initialization\r\n");
	TargClient = new TargetingSystemClient();
	TargClient->Connect(JETSON_IP,JETSON_PORT);
	printf("TargClient Initialized\r\n");
	AutonomousControl = new Auton(Drivetrain,Turret,&DriverStation::GetInstance(),Intake,ShooterWheel,TargClient);

	ReconnectTimer = new Timer();
	ReconnectTimer->Reset();
	ReconnectTimer->Start();

	GameTimer = new Timer();

	SendTimer = new Timer();
	SendTimer->Reset();
	SendTimer->Start();

	JetsonConnected = false;

	DisConnectionPrevTog = false;
	DisConnectionCurTog = false;

	Auto_Index = 0;
	m_ScriptSystem = 0;
	Init_Scripts_System();

	int connectionattempts = 0;
	printf("Will block to connect... \r\n");
	while ((connectionattempts < 5) && (TargClient->Get_Connected() == false))
	{
		if(ReconnectTimer->Get() > 2)
		{
			TargClient->Connect(JETSON_IP,JETSON_PORT);
			ReconnectTimer->Reset();
			connectionattempts++;
		}
	}
}

MyRobot::~MyRobot()
{
	TheRobot = NULL;
}
void MyRobot::Jetson_Connection()
{
	if(TargClient->Get_Connected() == false && ReconnectTimer->Get())
	{
		TargClient->Connect(JETSON_IP,JETSON_PORT);
		ReconnectTimer->Reset();
	}
}
void MyRobot::Shutdown_Jetson(void)
{
	TargClient->Shutdown_Jetson();
}
void MyRobot::Autonomous(void)
{
	Load_Scripts();
		printf("loaded\n");
		m_ScriptSystem->Run_Auto_Script(0);
		printf("ransettings\n");
		AutonomousControl->Auto_Start();
		printf("startfunction\n");
		m_ScriptSystem->Run_Auto_Script(Auto_Index);
		AutonomousControl->Auto_End();
}
void MyRobot::UpdateInputs()
{
	commandLeft = -leftStick->GetY();
	commandRight = -rightStick->GetY();
}
void MyRobot::OperatorControl(void)
{
	while (IsOperatorControl() && IsEnabled())
	{

		UpdateInputs();
		Drivetrain->StandardTank(commandLeft, commandRight);
		Drivetrain->Shifter_Update(rightStick->GetTrigger());
		Intake->UpdateIntake(leftStick->GetRawButton(3), leftStick->GetTrigger());
		ShooterWheel->SetSpeed(turretStick->GetZ());
		/*ShooterWheel->UpdateShooter(turretStick->GetRawButton(4),
		turretStick->GetRawButton(10), GameTimer->Get());
		ShooterWheel->OverrideCommand = (turretStick->GetZ()+.5f)*5000.0f;*/
		Wait(0.002);
	}
}

START_ROBOT_CLASS(MyRobot);
